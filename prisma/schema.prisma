// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/generated/graphql"
  reExport               = "All"
  prismaClientImport     = "@/generated/prisma"
  purgeOutput            = true
  fields_Scalars_from    = "graphql-scalars"
  fields_Scalars_input   = true
  fields_Scalars_output  = true
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs"
}

enum ResourceType {
  IMAGE
  VIDEO
}

enum Role {
  USER
  ADMIN
}

enum ListingStatus {
  AVAILABLE
  SOLD
  EXPIRED
}

enum Currency {
  NGN
}

model User {
  id String @id @default(cuid())

  /// Profile avatar (URL to image)
  avatar String?
  bio    String?

  name String?

  /// @Unique()
  /// @FieldType('Scalars.GraphQLEmailAddress')
  email    String @unique
  username String @unique

  /// @HideField()
  /// @Validator.IsStrongPassword({ minLength: 8})
  password String

  /// User roles for RBAC
  /// @Default ["USER"]
  roles Role[] @default([USER])

  emailIsVerified Boolean @default(false)

  /// @FieldType('Scalars.GraphQLPhoneNumber')
  phone           String? @unique
  phoneIsVerified Boolean @default(false)

  /// Scheduled items created by the user
  events Event[]

  /// Boards created by the user
  boards Board[]

  /// Posts authored by the user
  posts Post[]

  listings Listing[]
  Business Business?

  /// Users this user is following
  /// @Relation(name: "Following")
  following UserFollow[] @relation("Following")

  /// Users following this user
  /// @Relation(name: "Followers")
  followers UserFollow[] @relation("Followers")

  /// Boards this user is following
  followedBoards BoardFollower[]

  /// @ReadOnly()
  createdAt DateTime @default(now())

  /// @ReadOnly()
  updatedAt DateTime @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  jtiHash   String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Business {
  id String @id @default(cuid())

  /// Link to User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Contact info
  whatsapp  String?
  instagram String?

  inventories Inventory[]

  /// @ReadOnly()
  createdAt DateTime @default(now())

  /// @ReadOnly()
  updatedAt DateTime @updatedAt
}

model UserFollow {
  id String @id @default(cuid())

  /// The user who follows
  /// @HideField({ input: true, output:  false})
  followerId String
  /// @HideField({ input: true, output:  false})
  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)

  /// The user being followed
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  /// @ReadOnly()
  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Category {
  id String @id @default(cuid())

  /// @Validator.MinLength(3)
  /// @Example "Health"
  name String

  /// Optional category description
  description String?

  /// Parent category (self-relation)
  parentId String?
  parent   Category? @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: SetNull)

  /// Child categories
  children Category[] @relation("CategoryToParent")

  events      Event[]
  boards      BoardCategory[]
  listings    Listing[]
  inventories Inventory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
  @@index([parentId])
}

model Board {
  id String @id @default(cuid())

  /// @Validator.MinLength(3)
  /// @Example "Weekly Planning"
  name String

  /// Optional board description
  description String?

  categories BoardCategory[]
  followers  BoardFollower[]
  events     Event[]
  posts      Post[]

  /// @HideField({ input: true, output:  false})
  userId    String
  /// @HideField({ input: true, output:  false})
  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// @ReadOnly()
  createdAt DateTime @default(now())

  /// @ReadOnly()
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model BoardCategory {
  boardId    String
  categoryId String

  board    Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([boardId, categoryId])
  @@index([boardId])
  @@index([categoryId])
}

model BoardFollower {
  id String @id @default(cuid())

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  /// @HideField({ input: true, output:  false})
  userId String
  /// @HideField({ input: true, output:  false})
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// @ReadOnly()
  createdAt DateTime @default(now())

  @@unique([boardId, userId])
  @@index([boardId])
  @@index([userId])
}

model Event {
  id String @id @default(cuid())

  /// @Validator.MinLength(3)
  /// @Example "Team Standup"
  title String

  description String?
  startTime   DateTime
  endTime     DateTime
  location    String

  mediaId String?
  media   Media?  @relation(fields: [mediaId], references: [id], onDelete: SetNull)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  /// @HideField({ input: true, output:  false})
  userId    String
  /// @HideField({ input: true, output:  false})
  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: SetNull)

  post Post[]

  /// @ReadOnly()
  createdAt DateTime @default(now())

  /// @ReadOnly()
  updatedAt DateTime @updatedAt

  @@index([boardId])
  @@index([categoryId])
  @@index([startTime])
}

model Post {
  id String @id @default(cuid())

  /// @Optional()
  textContent String?

  /// Related media assets
  postMedia PostMedia[]

  /// @HideField({ input: true, output:  false})
  userId String
  /// @HideField({ input: true, output:  false})
  author User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: SetNull)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)

  /// @HideField({ input: true, output:  false})
  parentId String?
  parent   Post?   @relation("Thread", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Post[]  @relation("Thread")

  /// @ReadOnly()
  createdAt DateTime @default(now())

  /// @ReadOnly()
  updatedAt    DateTime      @updatedAt
  feedDelivery FeedDelivery?

  @@index([userId])
  @@index([boardId])
  @@index([eventId])
  @@index([parentId])
  @@index([createdAt])
}

model FeedDelivery {
  id        String   @id @default(cuid())
  postId    String   @unique
  delivered Boolean  @default(false)
  attempts  Int      @default(0)
  lastError String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
}

model Media {
  id String @id @default(cuid())

  /// Cloudinary public ID or external provider key
  /// @Unique()
  publicId String @unique

  secureUrl String
  format    String
  width     Int?
  height    Int?
  bytes     Int

  resourceType ResourceType
  duration     Float?
  playbackUrl  String?
  eager        Json?

  /// @ReadOnly()
  createdAt      DateTime         @default(now())
  PostMedia      PostMedia[]
  ListingMedia   ListingMedia[]
  InventoryMedia InventoryMedia[]
  Event          Event[]

  @@index([resourceType])
  @@index([createdAt])
}

// Join tables for media ownership
model PostMedia {
  postId  String
  mediaId String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([postId, mediaId])
  @@index([mediaId])
  @@index([postId])
}

model ListingMedia {
  listingId String
  mediaId   String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([listingId, mediaId])
  @@index([mediaId])
  @@index([listingId])
}

model InventoryMedia {
  inventoryId String
  mediaId     String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  media       Media     @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([inventoryId, mediaId])
  @@index([mediaId])
  @@index([inventoryId])
}

model Listing {
  id String @id @default(cuid())

  /// Title e.g. "Fairly Used Laptop"
  title String

  description String?

  /// @Validator.IsDecimal()
  price Decimal @db.Decimal(12, 2)

  /// Currency code for price
  currency Currency @default(NGN)

  status ListingStatus @default(AVAILABLE)

  /// @HideField({ input: true, output: false })
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Category link (e.g. Gadgets, Furniture, Hostel Spaces)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  listingMedia ListingMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// @SoftDelete()
  deletedAt DateTime?

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([createdAt])
}

model Inventory {
  id String @id @default(cuid())

  /// Item title e.g. "Brand New Charger"
  title String

  description String?

  /// Unit price
  /// @Validator.IsDecimal()
  price Decimal @db.Decimal(12, 2)

  /// Stock quantity
  stock Decimal @default(1.0)

  /// Measurement unit, e.g. "pcs", "yards", "kg", "litres"
  unit String @default("pcs")

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  inventoryMedia InventoryMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
}
